#!/usr/bin/perl
#
# WIRE
# This script generates tables to be used in LaTeX.
#
# Usage: run in one of the output directories generated by
#        wire-info-analysis --harvest-statistics
#

use IO::File;
my	$dir	= `dirname $0`;	chomp $dir;
require "$dir/wire-report.lib";

use strict;
use warnings;

WIRE::init( "harvest" );

########################################################################
#
# Generate the latex tables 
# 
########################################################################

WIRE::select_rows( 
	datafile		=> 'harvest_analysis.csv',
	outfile			=> 'summary_table.csv',
	colnames		=> [ qw(id begintime count_site count count_ok raw_size) ],
	header			=> [ 'Batch number',
						'Begin time', 
						'Active sites', 
						'Number of documents', 'Documents Ok',
						'Bytes transfered' ]
);

WIRE::select_rows( 
	datafile		=> 'harvest_analysis.csv',
	outfile			=> 'link_scores.csv',
	colnames		=> [ qw(id begintime count_ok sum_pagerank sum_wlrank sum_hubrank sum_authrank) ]
);

my $SUM_COUNTDOC	= 0;
my $SUM_PAGERANK	= 0;
my $SUM_WLRANK		= 0;
my $SUM_HUBRANK		= 0;
my $SUM_AUTHRANK	= 0;

my $FIRST_TIMESTAMP	= 0;

WIRE::select_rows( 
	datafile		=> 'harvest_analysis.csv',
	outfile			=> 'link_scores_cumulative.csv',
	colnames		=> [ qw(id begintime count_ok sum_pagerank sum_wlrank sum_hubrank sum_authrank) ],
	parse_row	=> sub {
		my @line	= @_;
		if( $line[0] && $line[0] =~ /^\d+$/ ) {
			$line[2]	= $SUM_COUNTDOC += $line[2];
			$line[3]	= $SUM_PAGERANK	+= $line[3];
			$line[4]	= $SUM_WLRANK	+= $line[4];
			$line[5]	= $SUM_HUBRANK	+= $line[5];
			$line[6]	= $SUM_AUTHRANK	+= $line[6];

			if( $FIRST_TIMESTAMP == 0 ) {
				$FIRST_TIMESTAMP	= $line[1];
			}
		}
		return @line;
	}
);

WIRE::select_rows( 
	datafile		=> 'harvest_analysis.csv',
	outfile			=> 'documents_per_second.csv',
	colnames		=> [ qw(id begintime endtime count_ok) ],
	parse_row	=> sub {
		my @line	= @_;
		if( $line[0] && $line[0] =~ /^\d+$/ ) {
			@line	= ( $line[0], $line[2], ( $line[3] / ($line[2] - $line[1] ) ) );
		}
		return @line;
	}
);

WIRE::select_rows( 
	datafile		=> 'harvest_analysis.csv',
	outfile			=> 'bytes_per_second.csv',
	colnames		=> [ qw(id begintime endtime raw_size) ],
	parse_row	=> sub {
		my @line	= @_;
		if( $line[0] && $line[0] =~ /^\d+$/ ) {
			@line	= ( $line[0], $line[2], ( $line[3] / ($line[2] - $line[1] ) ) );
		}
		return @line;
	}
);

WIRE::select_rows( 
	datafile		=> 'harvest_analysis.csv',
	outfile			=> 'other_scores.csv',
	colnames		=> [ qw(id begintime count_ok sum_depth sum_in_degree) ]
);


WIRE::latex_table( 
	'summary_table',
	longtable=>1, nopercent=>1, nosort=>1,
	parse_row	=> sub {
		my @line	= @_;
		if( $line[0] && $line[0] =~ /^\d+$/ ) {
			$line[1]	= POSIX::strftime( "%Y/%m/%d %H:%M", localtime( $line[1] ) );
		}
		return @line;
	}
);

########################################################################
#
# Generate the graphs 
# 
########################################################################

my @GRAPHS_SUMMARY_TABLE	= (
	'count_site'	, 3, 'Active sites',
	'count'			, 4, 'Number of pages',
	'count_ok'		, 5, 'Number of pages OK',
	'raw_size'		, 6, 'Size in bytes' );

while( my $code = shift @GRAPHS_SUMMARY_TABLE ) {
	my $colnum		= shift @GRAPHS_SUMMARY_TABLE;
	my $title		= shift @GRAPHS_SUMMARY_TABLE;

	WIRE::gnuplot(
		datafile	=> 'summary_table.csv',
		out			=> $code,
		xlabel		=> 'Batch round',
		ylabel		=> $title,
		xdata		=> 'time',
		using		=> qq|(\$2):(\$${colnum}) "%lf,%lf,%lf,%lf,%lf,%lf"|,
		with		=> 'linespoints' );

};

my @GRAPHS_SPEED	= (
	'bytes_per_second'		, 'Bytes per second',
	'documents_per_second'	, 'Documents per second' );

while( my $code = shift @GRAPHS_SPEED ) {
	my $title		= shift @GRAPHS_SPEED;

	WIRE::gnuplot(
		datafile	=> $code . '.csv',
		out			=> $code,
		xlabel		=> 'Batch round',
		ylabel		=> $title,
		xdata		=> 'time',
		using		=> qq|(\$2):(\$3) "%lf,%lf,%lf"|,
		with		=> 'linespoints' );

};

my @GRAPHS_OTHER_SCORES	= (
	'depth'		, 4, 'Depth',
	'in_degree'		, 5, 'In-degree',
);

while( my $code = shift @GRAPHS_OTHER_SCORES ) {
	my $colnum		= shift @GRAPHS_OTHER_SCORES;
	my $title		= shift @GRAPHS_OTHER_SCORES;

	WIRE::gnuplot(
		datafile	=> 'other_scores.csv',
		out			=> 'average_' . $code,
		xlabel		=> 'Batch round',
		ylabel		=> 'Average ' . $title,
		xdata		=> 'time',
		using		=> qq|(\$2):(\$${colnum} / \$3) "%lf,%lf,%lf,%lf,%lf"|,
		with		=> 'linespoints' );

}

my @GRAPHS_LINK_SCORES	= (
	'pagerank'		, 4, 'Pagerank',
	'wlrank'		, 5, 'Weighted page rank',
	'hubrank'		, 6, 'Hub score',
	'authrank'		, 7, 'Auth score'
);

my $DAY_IN_SECONDS	= 60 * 60 * 24;

while( my $code = shift @GRAPHS_LINK_SCORES ) {
	my $colnum		= shift @GRAPHS_LINK_SCORES;
	my $title		= shift @GRAPHS_LINK_SCORES;

	my $xlabel		= "Day of crawling";

	WIRE::gnuplot(
		datafile	=> 'link_scores.csv',
		out			=> 'sum_' . $code,
		xlabel		=> $xlabel,
		ylabel		=> 'Sum of ' . $title,
		using		=> qq|((\$2-$FIRST_TIMESTAMP)/$DAY_IN_SECONDS):(\$${colnum}) "%lf,%lf,%lf,%lf,%lf,%lf,%lf"|,
		with		=> 'linespoints' );

	WIRE::gnuplot(
		datafile	=> 'link_scores.csv',
		out			=> 'average_' . $code,
		xlabel		=> $xlabel,
		ylabel		=> 'Average ' . $title,
		using		=> qq|((\$2-$FIRST_TIMESTAMP)/$DAY_IN_SECONDS):(\$${colnum}) "%lf,%lf,%lf,%lf,%lf,%lf,%lf"|,
		with		=> 'linespoints' );

	WIRE::gnuplot(
		datafile	=> [ 'link_scores_cumulative.csv', 'link_scores_cumulative.csv' ],
		out			=> 'cumulative_' . $code . '_days',
		xlabel		=> $xlabel,
		ylabel		=> 'Cumulative fraction',
		range		=> '[] [0:1]',
		ytics		=> '0.1',
		grid		=> 'x y',
		key			=> 'bottom right',
		using		=> [ qq|((\$2-$FIRST_TIMESTAMP)/$DAY_IN_SECONDS):(\$${colnum}) "%lf,%lf,%lf,%lf,%lf,%lf,%lf"|, qq|((\$2-$FIRST_TIMESTAMP)/$DAY_IN_SECONDS):(\$3 / $SUM_COUNTDOC) "%lf,%lf,%lf,%lf,%lf,%lf,%lf"| ],
		title		=> [ $title, 'Documents' ],
		with		=> ['linespoints', 'linespoints'] );

	WIRE::gnuplot(
		datafile	=> 'link_scores_cumulative.csv',
		out			=> 'cumulative_' . $code,
		xlabel		=> 'Fraction of documents',
		ylabel		=> 'Cumulative ' . $code,
		range		=> '[] [0:1]',
		xtics		=> '0.1',
		ytics		=> '0.1',
		grid		=> 'x y',
		key			=> 'bottom right',
		using		=> qq|(\$3/$SUM_COUNTDOC):(\$${colnum}) "%lf,%lf,%lf,%lf,%lf,%lf,%lf"|,
		with		=> 'linespoints' );

}


# Now everything

WIRE::latex_report();
