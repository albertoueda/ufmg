#!/usr/bin/perl
#
# WIRE
# This script generates tables to be used in LaTeX.
#
# Usage: run in one of the output directories generated by
#        wire-info-analysis --doc-statistics
#

use IO::File;
my	$dir	= `dirname $0`;	chomp $dir;
require "$dir/wire-report.lib";

use strict;
use warnings;

WIRE::init( "doc_gathered_all" );

########################################################################
#
# Generate the latex tables (documents)
# 
########################################################################

my $MAX_YEARS_TABLES	= WIRE::conf( "analysis/maxyears/tables" );
my $MAX_YEARS_GRAPHS	= WIRE::conf( "analysis/maxyears/graphs" );

# Reserve first slot for summary report
WIRE::push_report( 'stats' );

WIRE::select_rows(
	datafile    => 'doc_sample.csv',
	outfile     => "doc_link_score_sample.csv",
	colnames    => [ 'pagerank', 'wlrank', 'hubrank', 'authrank', 'in_degree','out_degree' ]
);

WIRE::select_rows(
	datafile    => 'doc_sample.csv',
	outfile     => "doc_pagerank_others_sample.csv",
	colnames    => [ 'pagerank', 'last_visit', 'last_modified', 'raw_content_length', 'content_length', 'depth', 'in_degree','out_degree' ],
	header		=> [ 'pagerank', 'age', 'raw_content_length', 'content_length', 'depth', 'in_degree', 'out_degree' ],
	parse_row 	=> sub {
		my @line	= @_;
		if( defined $line[0] && $line[0] =~ /\d/ ) {
			@line	= (
				$line[0],
				$line[1] - $line[2],
				$line[3],
				$line[4],
				$line[5],
				$line[6],
				$line[7] );
		}
		return @line;
	}
);

WIRE::select_rows(
	datafile    => 'doc_sample.csv',
	outfile     => "doc_hits_others_sample.csv",
	colnames    => [ 'hubrank', 'authrank', 'last_visit', 'last_modified', 'raw_content_length', 'depth' ],
	header		=> [ 'hubrank', 'authrank', 'age', 'raw_content_length', 'depth' ],
	parse_row 	=> sub {
		my @line	= @_;
		if( defined $line[0] && $line[0] =~ /\d/ ) {
			@line	= (
				$line[0],
				$line[1],
				$line[2] - $line[3],
				$line[4],
				$line[5] );
		}
		return @line;
	}
);

WIRE::latex_table( "depth", nosort=>1 );
WIRE::latex_table( "doc_status" );
WIRE::latex_table( "http_code",
	parse_row => sub {
		my @line	= @_;
		$line[0] =~ s/^HTTP_//g;
		$line[0] = join( ' ', map { ucfirst(lc($_)) } split( /_/, $line[0] ) );
		return @line;
	});

WIRE::latex_table( "age_years",
	nosort=>1, maxcol1=>$MAX_YEARS_TABLES );
WIRE::latex_table( "mime_type",
	parse_row => sub {
		my @line	= @_;
		$line[0] =~ s/^MIME_//;
		$line[0] = lc($line[0]);
		$line[0] =~ s/_/\//;
		return @line;
	});

########################################################################
#
# Generate the graphs (documents)
# 
########################################################################


foreach my $type ( qw(small large) ) {
	WIRE::gnuplot( 
		datafile		=> 'age_hours.csv',
		out				=> 'age_days_' . $type,
		using			=> '($1/24):($3) "%lf,%lf,%lf"',
		xlabel			=> 'Document age in days',
		ylabel			=> 'Fraction of pages',
		range			=> WIRE::conf( "analysis/doc/age_days_${type}/range" ),
		with			=> 'lines'
	);
}

WIRE::gnuplot(
	datafile		=> 'age_months.csv',
	out				=> 'age_months',
	using			=> '($1):($3) "%lf,%lf,%lf"',
	xlabel			=> 'Document age in months',
	ylabel			=> 'Fraction of pages',
	xtics			=> 12,
	range			=> "[0:" . ($MAX_YEARS_GRAPHS * 12) . "]",
	with			=> 'linespoints'
);

WIRE::gnuplot(
	datafile		=> 'age_years.csv',
	out				=> 'age_years',
	using			=> '($1):($3) "%lf,%lf,%lf"',
	xlabel			=> 'Document age in Years',
	ylabel			=> 'Fraction of pages',
	xtics			=> 1,
	range			=>  "[0:" . ($MAX_YEARS_GRAPHS) . "]",
	with			=> 'boxes'
);

WIRE::gnuplot(
	datafile		=> 'depth.csv',
	out				=> 'depth',
	using			=> '($1):($3) "%lf,%lf,%lf"',
	xlabel			=> 'Page depth',
	ylabel			=> 'Fraction of pages',
	xtics			=> 1,
	range			=> '[1:]',
	with			=> 'boxes'
);

# Multiple graph for scores

my @graphs_loglog = (
	'in_degree'				, 'Number of incoming links',
	'out_degree'			, 'Number of outgoing links',
	'pagerank'				, 'Page rank',
	'wlrank'				, 'Weighted page rank',
	'hubrank'				, 'Hub score',
	'authrank'				, 'Auth score',
	'content_length_kb'		, 'Content length of parsed HTML in KB',
	'raw_content_length_kb'	, 'Content length of unparsed HTML in KB',
);

while( my $code = shift @graphs_loglog ) {
	my $title	= shift @graphs_loglog;
	my $fitmin	= WIRE::conf( "analysis/doc/${code}/fitmin" );
	my $fitmax	= WIRE::conf( "analysis/doc/${code}/fitmax" );
	my $range	= WIRE::conf( "analysis/doc/${code}/range" );
	my $fit		= ( $fitmin or $fitmax );

	WIRE::gnuplot(
		datafile		=> "${code}.csv",
		out				=> $code,
		using			=> '($1):($3) "%lf,%lf,%lf"',
		xlabel			=> $title,
		ylabel			=> 'Fraction of pages',
		xtics			=> 'autofreq',
		logscale		=> 'xy',
		range			=> $range,
		fit				=> $fit,
		fitmin			=> $fitmin,
		fitmax			=> $fitmax,
		with			=> 'points'
	);

	# Plot cumulative graph

	my $CUMULATIVE	= 0;
	my $COUNT		= 0;

	my $code_modified = $code;
	   $code_modified =~ s/_/-/g;

	WIRE::select_rows(
		datafile	=> "${code}.csv",
		outfile		=> "cumulative_${code}.csv",
		colnames	=> [ 1, 'Documents' ],
		sortdesc	=> 1,
		parse_row	=> sub {
			my @line	= @_;
			if( defined $line[0] && $line[1] =~ /\d/ && $line[1] != 0 ) {
				my $value	= $line[0];
				my $ndocs	= $line[1];

				$line[0]	= $COUNT	  += $ndocs;
				$line[1]	= $CUMULATIVE += ($value * $ndocs);
			}
			return @line;
		}
	);

	WIRE::gnuplot(
		datafile		=> "cumulative_${code}.csv",
		out				=> "cumulative_${code}",
		using			=> qq|(\$1/$COUNT):(\$2/$CUMULATIVE) "%lf,%lf,%lf"|,
		xlabel			=> "Cumulative Documents",
		ylabel			=> "Cumulative $title",
		with			=> 'lines'
	);
}


# Scatter plots

my @scatter_link = (
	'pagerank',		1,	'wlrank'	,	2,
	'pagerank',		1,	'hubrank'	,	3,
	'pagerank',		1,	'authrank'	,	4,
	'pagerank',		1,	'in_degree'	,	5,
	'pagerank',		1,	'out_degree',	6,
	'hubrank',		3,	'authrank'	,	4,
	'hubrank',		3,	'in_degree'	,	5,
	'hubrank',		3,	'out_degree',	6,
	'authrank',		4,	'in_degree'	,	5,
	'authrank',		4,	'out_degree',	6
);

while( my $code1	= shift @scatter_link ) {
	my $col1	= shift @scatter_link;
	my $code2	= shift @scatter_link;
	my $col2	= shift @scatter_link;

	WIRE::gnuplot(
		datafile		=> "doc_link_score_sample.csv",
		out				=> "${code1}_${code2}",
		using			=> qq|(\$${col1}):(\$${col2}) "%lf,%lf,%lf,%lf,%lf,%lf"|,
		xlabel			=> $code1,
		ylabel			=> $code2,
		logscale		=> 'xy',
		with			=> 'points'
	);

}

my @scatter_pagerank = (
	'age',						2,	'pagerank',					1,
	'raw_content_length',		3,	'pagerank',					1,
	'content_length',			4,	'pagerank',					1,
	'depth',					5,	'pagerank',					1,
	'age',						2,	'raw_content_length',		3,
	'age',						2,	'content_length',			4,
	'depth',					5,	'age',						2,
	'age',						2,	'in_degree'	,				6,
	'age',						2,	'out_degree',				7,
	'raw_content_length',		3,	'content_length',			4,
	'depth',					5,	'raw_content_length',		3,
	'raw_content_length',		3,	'in_degree'	,				6,
	'raw_content_length',		3,	'out_degree',				7,
	'depth',					5,	'content_length',			4,
	'content_length',			4,	'in_degree'	,				6,
	'content_length',			4,	'out_degree',				7,
	'depth',					5,	'in_degree'	,				6,
	'depth',					5,	'out_degree',				7,
	'in_degree',				6,	'out_degree',				7,
);

while( my $code1	= shift @scatter_pagerank ) {
	my $col1	= shift @scatter_pagerank;
	my $code2	= shift @scatter_pagerank;
	my $col2	= shift @scatter_pagerank;

	my $logscaleX	= 1;
	my $logscaleY	= 1;

	# Neither depth nor age should be plotted in log scale
	if( $code1 eq 'depth' || $code1 eq 'age' ) {
		$logscaleX	= 0;
	}
	if( $code2 eq 'depth' || $code2 eq 'age' ) {
		$logscaleY	= 0;
	}
	my $logscale	= ( $logscaleX ? "x" : "" ) . ( $logscaleY ? "y" : "" );

	# The age range must be appropiate
	my $range		=
		( $code1 eq 'age' ? "[0:" . ($MAX_YEARS_GRAPHS * 31536000) . "]" : "[] " )
	.	( $code2 eq 'age' ? "[0:" . ($MAX_YEARS_GRAPHS * 31536000) . "]" : "[]" );

	# Plot
	WIRE::gnuplot(
		datafile		=> "doc_pagerank_others_sample.csv",
		out				=> "${code1}_${code2}",
		using			=> qq|(\$${col1}):(\$${col2}) "%lf,%lf,%lf,%lf,%lf,%lf,%lf"|,
		xlabel			=> $code1,
		ylabel			=> $code2,
		range			=> $range,
		logscale		=> $logscale,
		with			=> 'points'
	);

}

# Hubs and authorities

my @scatter_hits = (
	'age',						3,	'hubrank',					1,
	'age',						3,	'authrank',					2,
	'raw_content_length',		4,	'hubrank',					1,
	'raw_content_length',		4,	'authrank',					2,
	'depth',					5,	'hubrank',					1,
	'depth',					5,	'authrank',					2
);

while( my $code1	= shift @scatter_hits ) {
	my $col1	= shift @scatter_hits;
	my $code2	= shift @scatter_hits;
	my $col2	= shift @scatter_hits;

	my $logscaleX	= 1;

	# Neither depth nor age should be plotted in log scale
	if( $code1 eq 'depth' || $code1 eq 'age' ) {
		$logscaleX	= 0;
	}
	my $logscale	= ( $logscaleX ? "x" : "" ) . ( "y" );

	# The age range must be appropiate
	my $range		= ( $code1 eq 'age' ? "[0:" . ($MAX_YEARS_GRAPHS * 31536000) . "]" : "[] " ) . " []";

	# Plot
	WIRE::gnuplot(
		datafile		=> "doc_hits_others_sample.csv",
		out				=> "${code1}_${code2}",
		using			=> qq|(\$${col1}):(\$${col2}) "%lf,%lf,%lf,%lf,%lf"|,
		xlabel			=> $code1,
		ylabel			=> $code2,
		range			=> $range,
		logscale		=> $logscale,
		with			=> 'points'
	);

}



########################################################################
#
# Generate the summary table
# 
########################################################################

print STDERR "Generating summary table ... ";

# Summary
my $out	= new IO::File "> stats.tex";
my( $total, $dynamic, $duplicates ) = split( /,/, `cat stats.csv | tail -n 1` );

my $unique	= $total - $duplicates;
my $static	= $total - $dynamic;

print $out "\\begin{table}[htb]\n";
print $out "\\begin{tabular}{l|l|l}\n";
print $out "Total pages & " . WIRE::numformat($total) . " & \\\\ \\hline \n";
print $out "Unique  & " . WIRE::numformat($unique) . " & " . WIRE::numformat( $unique * 100 / $total ) . "\\% \\\\ \n";
print $out "Duplicates  & " . WIRE::numformat($duplicates) . " & " . WIRE::numformat( $duplicates * 100 / $total ) . "\\% \\\\ \\hline\n";
print $out "Static  & " . WIRE::numformat($static) . " & " . WIRE::numformat( $static * 100 / $total ) . "\\% \\\\ \n";
print $out "Dynamic  & " . WIRE::numformat($dynamic) . " & " . WIRE::numformat( $dynamic * 100 / $total ) . "\\% \\\\ \n";

print $out "\\end{tabular}\n";
print $out "\\label{tblStats}\n";
print $out "\\caption{Summary}\n";
print $out "\\end{table}\n";
$out->close();

print STDERR "done.\n";

# Now everything

WIRE::latex_report();
