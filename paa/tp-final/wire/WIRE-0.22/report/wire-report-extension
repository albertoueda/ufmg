#!/usr/bin/perl
#
# Usage: this is used to analyze the output of
#        wire-info-analysis --extension-statistics
#

use IO::File;
use Locale::Country;

my	$dir	= `dirname $0`;	chomp $dir;
require "$dir/wire-report.lib";

use strict;
use warnings;

WIRE::init( "extension" );

# Conf variables
my $TLD_FILE	= WIRE::conf( 'analysis/extension/tld/sizes-file' );
my $TLD_MIN		= WIRE::conf( 'analysis/extension/tld/min-links-difference' );

########################################################################
#
# Function to convert country codes into country names
# 
########################################################################

sub get_country_code {
	my $code	= shift;
	my $country	= Locale::Country::code2country($code);
	if( defined $country ) {
		$country =~ s/,//;
		if( length( $country ) > 40 ) {
			$country = substr( $country, 0, 40 ) . '...';
		}
		$code = uc($code) . ' -- ' . $country;
	} else {
		$code = uc($code);
	}
	return $code;
}

sub countries {
	my @line	= @_;
	$line[0]	= get_country_code( $line[0] );
	return @line;
}

########################################################################
#
# Generate a table with differences between the size of top
# level domains and the numbers of links found to them.
# 
########################################################################

die( "Can't found tld file $TLD_FILE" ) unless -f $TLD_FILE;

my $in_tld	= new IO::File "< $TLD_FILE";
my %REALSIZE	= ();
my $sum_sizes	= 0;

while(my $line = <$in_tld>) {
	chomp $line;
	my( $code,$size ) = split( /,/, $line );
	$REALSIZE{$code}	= $size;
	$sum_sizes += $size;
}

# Normalize to sum 1

foreach my $key ( keys %REALSIZE ) {
	$REALSIZE{$key} 	/= $sum_sizes;
}

# Generate table with deviations

WIRE::select_rows(
	datafile        => "top_level_domains_only_pages.csv",
	outfile         => "top_level_domains_difference.csv",
	colnames        => ['Top-level domain', 'Fraction'],
	header          => ["Top-level domain (more than $TLD_MIN of links)", 'Fraction of links', 'Size of domain', '(Fraction * Fraction) / Size'],
	parse_row       => sub {
		my @line        = @_;

		if( ! $REALSIZE{$line[0]} || $line[1] < $TLD_MIN ) {
			return ('', '', '', '');
		} else {
			my $cc			= $line[0];
			my $fraction	= $line[1];
			my $realsize	= $REALSIZE{$cc};

			$line[0]        = get_country_code( $cc );
			$line[1]        = $fraction;
			$line[2]		= $realsize;
			$line[3]		= ( $fraction * $fraction ) / $REALSIZE{$cc};
		}
		return @line;
	}
);

########################################################################
#
# Write tables of top level domains
# 
########################################################################

WIRE::latex_table( "top_level_domains",
	cut=>WIRE::conf( 'analysis/extension/top_level_domains/cut' ),
	longtable=>1, parse_row=>\&countries );

WIRE::latex_table( "top_level_domains_only_pages",
	cut=>WIRE::conf( 'analysis/extension/top_level_domains/cut' ),
	longtable=>1, parse_row=>\&countries );

WIRE::latex_table( "top_level_domains_difference",
	nonumformat=>1,
	cut=>WIRE::conf( 'analysis/extension/top_level_domains/cut' ),
	longtable=>1, nopercent=>1 );

########################################################################
#
# Generate statistics for extensions
# 
########################################################################

# Load table of equivalent extensions
my %EQUIVALENT_EXTENSION;

foreach my $group ( WIRE::conf( 'seeder/extensions//group' ) ) {
	foreach my $atom ( split( /\s/, $group ) ) {
		if( $atom =~ /:/ ) {
			my @list	= split( /:/, $atom );
			my $main	= shift @list;
			while( my $alias = shift @list ) {
				$EQUIVALENT_EXTENSION{$alias}	= $main;
			}
		}
	}
}

# Load tables of categories
my %CATEGORIES;
my %KNOWN_EXTENSIONS;

$WIRE::CONF=$WIRE::CONF;	# Avoid warn

foreach my $group ( $WIRE::CONF->findnodes( "/config/seeder/extensions//group" )->get_nodelist() ) {
	my @attributes	= $group->attributes();
	my $label		= $attributes[0]->getValue();
	my @extensions	= split( /[:\s]/, $group->textContent() );

	foreach my $ext ( @extensions ) {
		$CATEGORIES{$label}->{$ext}	= 1;
		$KNOWN_EXTENSIONS{$ext}		= 1;
	}
}

# Tables per extensions

my $cut_extensions	= WIRE::conf( 'analysis/extension/extensions/cut' );
my $active_mapping;

foreach my $category ( keys %CATEGORIES ) {
{
	$active_mapping	= $CATEGORIES{$category}};


	WIRE::latex_table( "extensions_" . lc($category),
		cut		=> $cut_extensions,
		longtable=> 1,
		add_repeated=>1,
		input	=> 'extensions',
		parse_row	=> sub {
			my @line = @_;
			return @line if $. == 1;

			my $ext = $line[0];

			( $EQUIVALENT_EXTENSION{$ext} )
				and $line[0]	= $EQUIVALENT_EXTENSION{$ext};

			if( $active_mapping->{$line[0]} ) {
				return @line;
			} else {
				return ();
			}
		}
	);
}

WIRE::latex_table( "extensions_unknown",
	cut		=> $cut_extensions,
	longtable=> 1,
	add_repeated=>1,
	input	=> 'extensions',
	parse_row	=> sub {
		my @line = @_;
		return @line if $. == 1;

		( $EQUIVALENT_EXTENSION{$line[0]} )
			and $line[0]	= $EQUIVALENT_EXTENSION{$line[0]};

		if( $KNOWN_EXTENSIONS{$line[0]} ) {
			return ();
		} else {
			return @line;
		}
	}
);

# All extensions

WIRE::latex_table( "extensions",
	cut=>WIRE::conf( 'analysis/extension/extensions/cut' ), longtable=>1 );


WIRE::latex_report();

