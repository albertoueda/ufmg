
1) brigando com ponteiros
        - *d, pointer*, &x
        - o que malloc devolve e o que é necessário fazer cast (c x c++)
        - procurar usar const
        - muito cuidado com ponteiros
        - null no c++
        - por que o feofiloff utiliza ponteiros ao invés do próprio struct

2) quais elementos eu adiciono a lista (i < j)

3) inicialização de variáveis

4) arestas repetidas mudou boa parte da implementação

5) utilizar int achando que estou utiilzando double. 1.2324 --> 1

6) Condição de parada: evitar parar por medo!!!

7) assume que a entrada está ok (v < V, 1 vertices nok)

--- tp2

8) reserve : good, but more important when using iterators possibly invalidated by reallocation
32767 (215-1) or greater*

9) test in future: reserve, emplace, emplace_back (complex parameter)

10) lembrar: pouco tempo = não ficar inventando moda

11) iterando de 0 a n  para descobrir vizinhança sendo que utilizo listas......

12) C++ std::bad_alloc error

13) Utilizar ponteiros ao invés de copiar dados

14) return boa prática, mas lembrar de executar tudo que deveria antes de retornar

15) utilizar endereços de variaveis de escopo local não parece ser uma boa ideia. O conteúdo dos endereços mudam.
    method(a) {
        vector<int> a;
        x.a = &a;
    }
    x.a = ?

16) esquecer de mudar variaveis apos refatoração (g X gt)

--- tp3

17) usar aspas simples ao invés de aspas normais para strings com tamanho > 1










    cout << "visited nodes IN TENDRILS: ";
    for (int k = 0; k < in_tendrils_sccs.size(); k++)
    {
        cout << map_scc_reverse[in_tendrils_sccs[k]] << " ";
    }
    cout << endl;

    cout << "visited nodes OUT TENDRILS: ";
    for (int k = 0; k < out_tendrils_sccs.size(); k++)
    {
        cout << map_scc_reverse[out_tendrils_sccs[k]] << " ";
    }
    cout << endl;

    /*
    cout << "visited nodes IN : ";
    for (int k = 0; k < in_sccs.size(); k++)
    {
        cout << map_scc_reverse[in_sccs[k]] << " ";
    }
    cout << endl;

    cout << "visited nodes OUT: ";
    for (int k = 0; k < out_sccs.size(); k++)
    {
        cout << map_scc_reverse[out_sccs[k]] << " ";
    }
    cout << endl;


    cout << "visited nodes ALL CONNECTED: ";
    for (int k = 0; k < all_connected_sccs.size(); k++)
    {
        cout << map_scc_reverse[all_connected_sccs[k]] << " ";
    }
    cout << endl;
    */












// Assume that every scc has at least one node
void compress_graph(Graph* g, vector<SCC>* sccs, vector<SCC>* nodes_sccs, Graph* compressed_graph)
{
    // 1-based
    initialize_graph(compressed_graph, (*sccs).size() + 1);

    for (int scc_source = 1; scc_source < (*sccs).size(); scc_source++)
    {
        for (int i = 0; i < (*sccs)[scc_source].nodes.size(); i++)
        {
            node_target = (*sccs)[scc_source].nodes[i];

            // if different groups, insert edge from Source SCC -> Target SCC
            int sourceSCCId = (*nodes_sccs)[i].id;
            int targetSCCid = (*nodes_sccs)[cell->v].id;

            cout << "Analysing SCC edge " << sourceSCCId << " -> " << targetSCCid << endl;

            if (sourceSCCId != targetSCCid && !exists_edge(compressed_graph, sourceSCCId, targetSCCid))
            {
                cout << "  Inserting SCC edge " << sourceSCCId << " -> " << targetSCCid << endl;
                insert(compressed_graph, sourceSCCId, targetSCCid);
                print_graph(compressed_graph);
            }

            cout << "  End analysing SCC edge " << sourceSCCId << " -> " << targetSCCid << endl;
        }
    }

    cout << "termina?" << endl;
}



















void compress_graph(Graph* g, int new_size, vector<SCC>* nodes_sccs, Graph* compressed_graph)
{
    initialize_graph(compressed_graph, new_size);

    for (int i = 1; i < (*g).size(); i++)
        for (Cell cell = (*g)[i]; cell != NULL; cell = cell->next)
        {
            // if different groups, insert edge from Source SCC -> Target SCC
            int sourceSCCId = (*nodes_sccs)[i].id;
            int targetSCCid = (*nodes_sccs)[cell->v].id;

            cout << "Analysing SCC edge " << sourceSCCId << " -> " << targetSCCid << endl;

            if (sourceSCCId != targetSCCid && !exists_edge(compressed_graph, sourceSCCId, targetSCCid))
            {
                cout << "  Inserting SCC edge " << sourceSCCId << " -> " << targetSCCid << endl;
                insert(compressed_graph, sourceSCCId, targetSCCid);
                print_graph(compressed_graph);
            }

            cout << "  End analysing SCC edge " << sourceSCCId << " -> " << targetSCCid << endl;
        }

    cout << "termina?" << endl;
}








vector<Cell> merge(vector<Cell> left, vector<Cell> right)
{
    int i = 0, iLeft = 0, iRight = 0;
    int size = left.size() + right.size();
    vector<Cell> sorted(size);

    while (i < size)
    {
        if (iLeft == left.size() || iRight == right.size())
        {
            break;
        }

        if (left[iLeft]->v > right[iRight]->v)
        {
            sorted[i++] = left[iLeft++];
        }
        else
        {
            sorted[i++] = right[iRight++];
        }
    }

    // At maximum one of the conditions below will be true
    while (iRight < right.size())
    {
        sorted[i++] = right[iRight++];
    }

    while (iLeft < left.size())
    {
        sorted[i++] = left[iLeft++];
    }

    return sorted;
}

vector<Cell> mergesort(vector<Cell> cells, int p, int q)
{
    if (p < q)
    {
        int r = (p + q) / 2;
        vector<Cell> left = mergesort(cells, p, r);
        vector<Cell> right = mergesort(cells, r + 1, q);

        return merge(left, right);
    }

    // p == q. Just creates a vector of one element
    vector<Cell> single_vector(1);
    single_vector[0] = cells[p];

    return single_vector;
}

